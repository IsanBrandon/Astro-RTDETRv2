task: detection

model: RTDETR
criterion: RTDETRCriterionv2
postprocessor: RTDETRPostProcessor


use_focal_loss: True
eval_spatial_size: [640, 640] # h w


RTDETR: 
  backbone: PResNet
  encoder: HybridEncoder
  decoder: RTDETRTransformerv2
  

PResNet:
  depth: 50
  variant: d
  freeze_at: 0
  return_idx: [1, 2, 3]
  num_stages: 4
  freeze_norm: True
  pretrained: True 


HybridEncoder:
  in_channels: [512, 1024, 2048]
  feat_strides: [8, 16, 32]

  # intra
  hidden_dim: 256
  use_encoder_idx: [2]
  num_encoder_layers: 1
  nhead: 8
  dim_feedforward: 1024
  dropout: 0.
  enc_act: 'gelu'
  
  # cross
  expansion: 1.0
  depth_mult: 1
  act: 'silu'


RTDETRTransformerv2:
  feat_channels: [256, 256, 256]
  feat_strides: [8, 16, 32]
  hidden_dim: 256
  num_levels: 3

  num_layers: 6
  num_queries: 300

  num_denoising: 100
  label_noise_ratio: 0.5
  box_noise_scale: 1.0 # 1.0 0.4

  eval_idx: -1

  # NEW
  num_points: [4, 4, 4] # [3,3,3] [2,2,2]
  cross_attn_method: default # default, discrete
  query_select_method: default # default, agnostic 
  num_classes: 2              # Dsg (star, galaxy) 클래스 수로 변경
  num_galaxy_types: 2         # Astro-YOLO: Dds (smooth, disk) 클래스 수 추가


RTDETRPostProcessor:
  num_top_queries: 300


# RTDETRCriterionv2:
#   weight_dict: {loss_vfl: 1, loss_bbox: 5, loss_giou: 2,}
#   losses: ['vfl', 'boxes', ]
#   alpha: 0.75
#   gamma: 2.0

#   matcher:
#     type: HungarianMatcher
#     weight_dict: {cost_class: 2, cost_bbox: 5, cost_giou: 2}
#     alpha: 0.25
#     gamma: 2.0

# RTDETRCriterionv2 설정
RTDETRCriterionv2:
  # 손실 가중치:
  # 모든 손실에 대해 적절한 가중치를 정의해야 합니다.
  # 여기서는 예시 값이며, 실제 훈련 시 튜닝이 필요합니다.
  weight_dict:
    loss_focal: 1.0       # Dsg (star/galaxy) 분류 손실
    loss_bbox: 5.0        # 바운딩 박스 L1 손실
    loss_giou: 2.0        # GIoU 손실
    loss_galaxy_type: 1.0 # Astro-YOLO: 은하 타입 분류 손실

    # 보조 손실(aux_outputs) 가중치 (RTDETRTransformerv2의 num_layers - 1 만큼 필요)
    # decoder가 6 레이어이므로 aux_outputs는 5개 (0부터 4까지)
    loss_focal_aux_0: 0.4
    loss_bbox_aux_0: 2.0
    loss_giou_aux_0: 0.8
    loss_galaxy_type_aux_0: 0.4 # Astro-YOLO: 은하 타입 보조 손실

    loss_focal_aux_1: 0.4
    loss_bbox_aux_1: 2.0
    loss_giou_aux_1: 0.8
    loss_galaxy_type_aux_1: 0.4

    loss_focal_aux_2: 0.4
    loss_bbox_aux_2: 2.0
    loss_giou_aux_2: 0.8
    loss_galaxy_type_aux_2: 0.4

    loss_focal_aux_3: 0.4
    loss_bbox_aux_3: 2.0
    loss_giou_aux_3: 0.8
    loss_galaxy_type_aux_3: 0.4

    loss_focal_aux_4: 0.4
    loss_bbox_aux_4: 2.0
    loss_giou_aux_4: 0.8
    loss_galaxy_type_aux_4: 0.4

    # 인코더 보조 손실(enc_aux_outputs) 가중치 (enc_aux_outputs는 galaxy_types 손실 없음)
    # 인코더 레이어 수 (HybridEncoder: num_encoder_layers: 1)에 따라 달라집니다.
    # num_encoder_layers가 1이면 aux_outputs는 1개
    loss_focal_enc_0: 0.4
    loss_bbox_enc_0: 2.0
    loss_giou_enc_0: 0.8

  # 계산할 손실 목록 (losses 리스트에 "galaxy_types" 추가)
  losses: ['focal', 'boxes', 'giou', 'galaxy_types'] # <-- 'focal'과 'galaxy_types' 포함
  alpha: 0.75 # Focal Loss 파라미터 (유지)
  gamma: 2.0  # Focal Loss 파라미터 (유지)

  matcher:
    type: HungarianMatcher
    # 매처의 weight_dict는 일반적으로 criterion의 weight_dict와 다르게 설정됩니다.
    # 매칭 단계에서 클래스, 박스, GIOU 비용의 상대적 중요도를 나타냅니다.
    cost_class: 2      # 클래스 매칭 비용 (focal loss에 맞게 2)
    cost_bbox: 5       # 박스 매칭 비용
    cost_giou: 2       # GIoU 매칭 비용
    alpha: 0.25 # Focal Loss (cost_class)와 관련된 매처 파라미터
    gamma: 2.0  # Focal Loss (cost_class)와 관련된 매처 파라미터

  # Astro-YOLO: 'galaxy' 클래스 ID 추가 (Dsg에서 1로 매핑)
  galaxy_class_id: 1